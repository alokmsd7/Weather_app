{"version":3,"sources":["apiKeys.js","images/WeatherIcons.gif","forcast.js","currentLocation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","key","base","Forcast","useState","query","setQuery","error","setError","weather","setWeather","search","city","axios","get","apiKeys","then","response","data","catch","console","log","message","useEffect","className","icon","color","size","animate","main","type","placeholder","onChange","e","target","value","src","onClick","name","sys","country","alt","Math","round","temp","humidity","visibility","wind","speed","defaults","Weather","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","a","fetch","api_call","json","setState","handleSearch","coord","this","position","coords","latitude","longitude","err","alert","timerID","setInterval","clearInterval","Fragment","id","format","interval","ticking","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","temperature","onSearch","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3db7ca14.chunk.js","sourcesContent":["\nmodule.exports = {\n  key: \"cf20e551f2d83f86931c7fd6a2e0591b\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n","module.exports = __webpack_public_path__ + \"static/media/WeatherIcons.0a218296.gif\";","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast() {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = (city) => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${city}&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n        setError(\"\");\n      })\n      .catch(function (error) {\n        console.log(error);\n        setWeather({});\n        setError({ message: \"Not Found\", query: city });\n      });\n  };\n\n  useEffect(() => {\n    search(\"Delhi\");\n  }, []);\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={weather.weather ? weather.weather[0].icon : \"01d\"}\n          color=\"white\"\n          size={112}\n          animate={true}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{weather.weather ? weather.weather[0].main : \"\"}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <div className=\"img-box\">\n            {\" \"}\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={() => search(query)}\n            />\n          </div>\n        </div>\n        <ul>\n          {weather.main ? (\n            <div>\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                  alt=\"weather icon\"\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}Â°c (\n                  {weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Forcast;\n","import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\"; \nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        \n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n         \n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n     \n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  handleSearch = (city) => {\n    fetch(`${apiKeys.base}weather?q=${city}&units=metric&APPID=${apiKeys.key}`)\n      .then((response) => response.json())\n      .then((data) => {\n        this.getWeather(data.coord.lat, data.coord.lon);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n    \n      });\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}Â°<span>C</span>\n                </p>\n               \n              </div>\n            </div>\n          </div>\n          <Forcast \n            city={this.state.city}\n            temperature={this.state.temperatureC}\n            icon={this.state.icon} \n            weather={this.state.main} \n            onSearch={this.handleSearch} \n          />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React, { useState } from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n      <div className=\"footer-info\">\n        \n       \n        <a >\n         Alok SINGH\n        </a>\n       \n        \n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}